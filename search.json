[{"path":"https://cygei.github.io/epitree/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 Cyril Geismar Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://cygei.github.io/epitree/articles/mixtree.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"mixtree","text":"mixtree package provides statistical framework comparing sets trees. function tree_test(), can apply various hypothesis testing approaches assess differences tree sets. currently supporting transmission trees, future updates expand functionality include phylogenetic trees , generally, directed acyclic graphs (DAGs) .","code":""},{"path":"https://cygei.github.io/epitree/articles/mixtree.html","id":"methods","dir":"Articles","previous_headings":"","what":"Methods","title":"mixtree","text":"package implements following testing methods: PERMANOVA: Evaluates whether topological distribution trees differs sets. Null Hypothesis (H0): Transmission trees sets drawn distribution, implying similar topologies. Alternative Hypothesis (H1): least one set transmission trees comes different distribution. Chi-Square Fisher’s Exact Test: Evaluates whether distribution ancestor-descendant pairs differs sets. Null Hypothesis (H0): frequency ancestor-descendant pairs consistent across sets. Alternative Hypothesis (H1): frequency ancestor-descendant pairs differs least two sets.","code":""},{"path":"https://cygei.github.io/epitree/articles/mixtree.html","id":"input-requirements","dir":"Articles","previous_headings":"","what":"Input Requirements","title":"mixtree","text":"input set must list data frames. Every data frame represents tree must contain exactly two columns: : parent node (infector). : child node (infectee). make_tree helper function simulates DAG number branches per node drawn Poisson distribution λ\\lambda = R stochastic = TRUE","code":"make_tree(20, R = 2, stochastic = TRUE, plot = TRUE) #> IGRAPH c655255 D--- 20 19 --  #> + edges from c655255: #>  [1]  1-> 2  1-> 3  2-> 4  2-> 5  2-> 6  3-> 7  3-> 8  4-> 9  5->10  5->11 #> [11]  6->12  6->13  7->14  7->15  8->16  9->17  9->18  9->19 10->20"},{"path":"https://cygei.github.io/epitree/articles/mixtree.html","id":"usage","dir":"Articles","previous_headings":"","what":"Usage","title":"mixtree","text":"unified interface provided tree_test() function. Users can supply two sets trees select desired testing method via method parameter.","code":""},{"path":"https://cygei.github.io/epitree/articles/mixtree.html","id":"permanova","dir":"Articles","previous_headings":"Usage","what":"PERMANOVA","title":"mixtree","text":"p-value 5% significance level, reject null hypothesis difference.","code":"set.seed(123) # Generate 100 trees with R₀ = 2 chainA <- lapply(1:100, function(i){   make_tree(20, R = 2, stochastic = TRUE) |>     igraph::as_long_data_frame() })  # Generate 100 trees with R₀ = 4 chainB <- lapply(1:100, function(i){   make_tree(20, R = 4, stochastic = TRUE) |>      igraph::as_long_data_frame() })  tree_test(chainA, chainB, method = \"permanova\") #> Permutation test for adonis under reduced model #> Permutation: free #> Number of permutations: 999 #>  #> (function (formula, data, permutations = 999, method = \"bray\", sqrt.dist = FALSE, add = FALSE, by = NULL, parallel = getOption(\"mc.cores\"), na.action = na.fail, strata = NULL, ...)  #>           Df SumOfSqs      R2      F Pr(>F)     #> Model      1     8052 0.14429 33.388  0.001 *** #> Residual 198    47750 0.85571                   #> Total    199    55802 1.00000                   #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"},{"path":"https://cygei.github.io/epitree/articles/mixtree.html","id":"chi-square-test","dir":"Articles","previous_headings":"Usage","what":"Chi-Square Test","title":"mixtree","text":"","code":"tree_test(chainA, chainB, method = \"chisq\", test_args = list(simulate.p.value = TRUE, B = 999)) #>  #>  Pearson's Chi-squared test with simulated p-value (based on 999 #>  replicates) #>  #> data:  count data #> X-squared = 1791.2, df = NA, p-value = 0.001"},{"path":"https://cygei.github.io/epitree/articles/mixtree.html","id":"advanced-usage","dir":"Articles","previous_headings":"","what":"Advanced Usage","title":"mixtree","text":"tree_test() function accepts additional parameters customise testing process: within_dist: function compute pairwise distances within tree (used PERMANOVA). Default patristic. between_dist: function compute distance two trees (used PERMANOVA). Default euclidean. test_args: list extra arguments passed underlying test function (.e. vegan::adonis2,stats::chisq.test, stats::fisher.test).","code":""},{"path":"https://cygei.github.io/epitree/articles/mixtree.html","id":"using-custom-distance-functions","dir":"Articles","previous_headings":"Advanced Usage","what":"Using Custom Distance Functions","title":"mixtree","text":"package supports custom distance functions, MRCI depth measure described Kendall et al.(2018). See also vignette treespace.","code":"library(treespace) mrciDepth <- function(tree) {  treespace::findMRCIs(as.matrix(tree))$mrciDepths } tree_test(chainA, chainB, within_dist = mrciDepth) #> Permutation test for adonis under reduced model #> Permutation: free #> Number of permutations: 999 #>  #> (function (formula, data, permutations = 999, method = \"bray\", sqrt.dist = FALSE, add = FALSE, by = NULL, parallel = getOption(\"mc.cores\"), na.action = na.fail, strata = NULL, ...)  #>           Df SumOfSqs      R2      F Pr(>F)     #> Model      1   3723.5 0.14315 33.078  0.001 *** #> Residual 198  22288.0 0.85685                   #> Total    199  26011.5 1.00000                   #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"},{"path":"https://cygei.github.io/epitree/articles/mixtree.html","id":"note","dir":"Articles","previous_headings":"Advanced Usage > Using Custom Distance Functions","what":"Note","title":"mixtree","text":"Randomly shuffling node IDs affect PERMANOVA test results distance functions invariant node labelling. Since test focuses tree’s topology branch lengths rather specific identifiers, metrics patristic distances—derived solely tree structure—remain unchanged node IDs permuted. However, custom function depends order specific labels nodes, shuffling influence results.","code":"chainA <- lapply(1:50, function(i) {   make_tree(20, R = 2, stochastic = TRUE) }) chainB <- lapply(1:50, function(i) {   df <- mixtree:::shuffle_graph_ids(chainA[[i]]) |>     igraph::as_long_data_frame()   subset(df, select = c(\"from\", \"to\")) }) chainA <- lapply(chainA, igraph::as_long_data_frame)    tree_test(chainA, chainB, method = \"permanova\") #> Permutation test for adonis under reduced model #> Permutation: free #> Number of permutations: 999 #>  #> (function (formula, data, permutations = 999, method = \"bray\", sqrt.dist = FALSE, add = FALSE, by = NULL, parallel = getOption(\"mc.cores\"), na.action = na.fail, strata = NULL, ...)  #>          Df SumOfSqs R2  F Pr(>F) #> Model     1        0  0  0      1 #> Residual 98    29757  1           #> Total    99    29757  1  # In contrast, the Chi-Square test will reject the null as it compare the distribution of of ancestries for each case tree_test(chainA, chainB, method = \"chisq\") #>  #>  Pearson's Chi-squared test #>  #> data:  count data #> X-squared = 778.2, df = 207, p-value < 2.2e-16"},{"path":"https://cygei.github.io/epitree/articles/mixtree.html","id":"future-developments","dir":"Articles","previous_headings":"","what":"Future Developments","title":"mixtree","text":"current implementation focuses transmission trees, package designed extensibility mind. Future versions support phylogenetic trees Directed Acyclic Graphs (DAGs) generally.","code":""},{"path":"https://cygei.github.io/epitree/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Cyril Geismar. Author, maintainer, copyright holder.","code":""},{"path":"https://cygei.github.io/epitree/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Geismar C (2025). mixtree: Statistical Framework Comparing Sets Trees. R package version 0.0.0.9000, https://cygei.github.io/mixtree/.","code":"@Manual{,   title = {mixtree: A Statistical Framework for Comparing Sets of Trees},   author = {Cyril Geismar},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://cygei.github.io/mixtree/}, }"},{"path":"https://cygei.github.io/epitree/index.html","id":"mixtree","dir":"","previous_headings":"","what":"A Statistical Framework for Comparing Sets of Trees","title":"A Statistical Framework for Comparing Sets of Trees","text":"mixtree package provides statistical framework comparing sets trees.","code":""},{"path":"https://cygei.github.io/epitree/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A Statistical Framework for Comparing Sets of Trees","text":"can install development version mixtree GitHub :","code":"# install.packages(\"pak\") pak::pak(\"CyGei/mixtree\")"},{"path":"https://cygei.github.io/epitree/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick start","title":"A Statistical Framework for Comparing Sets of Trees","text":"","code":"library(mixtree)  # Simulate two chains of transmission trees chainA <- lapply(1:100, function(i) {   make_tree(20, R = 2, stochastic = TRUE) |>     igraph::as_long_data_frame() }) chainB <- lapply(1:100, function(i) {   make_tree(20, R = 4, stochastic = TRUE) |>     igraph::as_long_data_frame() })  # Compare the two chains result <- tree_test(chainA, chainB) print(result) #> Permutation test for adonis under reduced model #> Permutation: free #> Number of permutations: 999 #>  #> (function (formula, data, permutations = 999, method = \"bray\", sqrt.dist = FALSE, add = FALSE, by = NULL, parallel = getOption(\"mc.cores\"), na.action = na.fail, strata = NULL, ...)  #>           Df SumOfSqs      R2      F Pr(>F)     #> Model      1     6730 0.13248 30.236  0.001 *** #> Residual 198    44071 0.86752                   #> Total    199    50801 1.00000                   #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"},{"path":"https://cygei.github.io/epitree/reference/abouheif.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the Abouheif distance matrix — abouheif","title":"Compute the Abouheif distance matrix — abouheif","text":"Abouheif distance product number direct descendants node path two nodes. measure number transmission events two nodes.","code":""},{"path":"https://cygei.github.io/epitree/reference/abouheif.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the Abouheif distance matrix — abouheif","text":"","code":"abouheif(tree)"},{"path":"https://cygei.github.io/epitree/reference/abouheif.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the Abouheif distance matrix — abouheif","text":"tree data frame representing transmission tree, first column containing infector IDs second infectee IDs.","code":""},{"path":"https://cygei.github.io/epitree/reference/abouheif.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the Abouheif distance matrix — abouheif","text":"square, symmetric matrix Abouheif distances nodes.","code":""},{"path":"https://cygei.github.io/epitree/reference/abouheif.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the Abouheif distance matrix — abouheif","text":"","code":"tree <- data.frame(from = c(1, 1, 2, 2, 3, 3), to = c(2, 3, 4, 5, 6, 7)) abouheif(tree) #>   1 2 3  4  5  6  7 #> 1 0 0 0  3  3  3  3 #> 2 0 0 2  0  0  6  6 #> 3 0 2 0  6  6  0  0 #> 4 3 0 6  0  3 18 18 #> 5 3 0 6  3  0 18 18 #> 6 3 6 0 18 18  0  3 #> 7 3 6 0 18 18  3  0"},{"path":"https://cygei.github.io/epitree/reference/chisq_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Chi-Square Test on Sets of Transmission Trees — chisq_test","title":"Perform Chi-Square Test on Sets of Transmission Trees — chisq_test","text":"Tests whether distribution infector-infectee pairs differs sets transmission trees.","code":""},{"path":"https://cygei.github.io/epitree/reference/chisq_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Chi-Square Test on Sets of Transmission Trees — chisq_test","text":"","code":"chisq_test(..., method = c(\"chisq\", \"fisher\"), test_args = list())"},{"path":"https://cygei.github.io/epitree/reference/chisq_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Chi-Square Test on Sets of Transmission Trees — chisq_test","text":"... Two sets transmission trees. set list data frames columns . method Test use: \"chisq\" Chi-Square \"fisher\" Fisher's Exact Test. Default \"chisq\". test_args list additional arguments stats::chisq.test stats::fisher.test. Default empty list.","code":""},{"path":"https://cygei.github.io/epitree/reference/chisq_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Chi-Square Test on Sets of Transmission Trees — chisq_test","text":"htest object test results.","code":""},{"path":"https://cygei.github.io/epitree/reference/chisq_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform Chi-Square Test on Sets of Transmission Trees — chisq_test","text":"","code":"set.seed(1) # No difference in the sets setA <- replicate(10, igraph::as_long_data_frame(   make_tree(n_cases = 10, R = 2, stochastic = TRUE) ), simplify = FALSE ) setB <- replicate(10, igraph::as_long_data_frame(   make_tree(n_cases = 10, R = 2, stochastic = TRUE) ), simplify = FALSE ) mixtree:::chisq_test(setA, setB) #> Warning: Chi-squared approximation may be incorrect #>  #> \tPearson's Chi-squared test #>  #> data:  count data #> X-squared = 15.755, df = 28, p-value = 0.9693 #>   # Difference in the sets setC <- replicate(10, igraph::as_long_data_frame(   make_tree(n_cases = 10, R = 4, stochastic = TRUE) ), simplify = FALSE ) mixtree:::chisq_test(setA, setB, setC) #> Warning: Chi-squared approximation may be incorrect #>  #> \tPearson's Chi-squared test #>  #> data:  count data #> X-squared = 72.91, df = 54, p-value = 0.04412 #>"},{"path":"https://cygei.github.io/epitree/reference/euclidean.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the Euclidean distance between two distance matrices. — euclidean","title":"Calculate the Euclidean distance between two distance matrices. — euclidean","text":"function computes Euclidean distance lower triangular parts two given matrices.","code":""},{"path":"https://cygei.github.io/epitree/reference/euclidean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the Euclidean distance between two distance matrices. — euclidean","text":"","code":"euclidean(mat1, mat2)"},{"path":"https://cygei.github.io/epitree/reference/euclidean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the Euclidean distance between two distance matrices. — euclidean","text":"mat1 numeric matrix. mat2 numeric matrix.","code":""},{"path":"https://cygei.github.io/epitree/reference/euclidean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the Euclidean distance between two distance matrices. — euclidean","text":"numeric value representing Euclidean distance lower triangular parts mat1 mat2.","code":""},{"path":"https://cygei.github.io/epitree/reference/euclidean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the Euclidean distance between two distance matrices. — euclidean","text":"","code":"mat1 <- matrix(c(1, 2, 3, 4), 2, 2) mat2 <- matrix(c(4, 3, 2, 1), 2, 2) euclidean(mat1, mat2) #> [1] 1"},{"path":"https://cygei.github.io/epitree/reference/kendall.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the Kendall distance matrix — kendall","title":"Compute the Kendall distance matrix — kendall","text":"Kendall's distance measures depth recent common infector (MRCI) pair nodes respect source (patient 0).","code":""},{"path":"https://cygei.github.io/epitree/reference/kendall.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the Kendall distance matrix — kendall","text":"","code":"kendall(tree)"},{"path":"https://cygei.github.io/epitree/reference/kendall.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the Kendall distance matrix — kendall","text":"tree data frame representing transmission tree, first column containing infector IDs second infectee IDs.","code":""},{"path":"https://cygei.github.io/epitree/reference/kendall.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the Kendall distance matrix — kendall","text":"square, symmetric matrix Kendall's distances nodes.","code":""},{"path":"https://cygei.github.io/epitree/reference/kendall.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute the Kendall distance matrix — kendall","text":"Metric Compare Transmission Trees - M Kendall · 2018","code":""},{"path":[]},{"path":"https://cygei.github.io/epitree/reference/kendall.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the Kendall distance matrix — kendall","text":"","code":"tree <- data.frame(from = c(1, 1, 2, 2, 3, 3), to = c(2, 3, 4, 5, 6, 7)) kendall(tree) #>   1 2 3 4 5 6 7 #> 1 0 0 0 0 0 0 0 #> 2 0 1 0 1 1 0 0 #> 3 0 0 1 0 0 1 1 #> 4 0 1 0 2 1 0 0 #> 5 0 1 0 1 2 0 0 #> 6 0 0 1 0 0 2 1 #> 7 0 0 1 0 0 1 2"},{"path":"https://cygei.github.io/epitree/reference/make_tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a Transmission Tree — make_tree","title":"Generate a Transmission Tree — make_tree","text":"Creates transmission tree specified number cases branches per case. tree can generated fixed Poisson-distributed branching factors.","code":""},{"path":"https://cygei.github.io/epitree/reference/make_tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a Transmission Tree — make_tree","text":"","code":"make_tree(n_cases, R = 2, stochastic = FALSE, plot = FALSE)"},{"path":"https://cygei.github.io/epitree/reference/make_tree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a Transmission Tree — make_tree","text":"n_cases Integer. total number cases (nodes) tree. R Integer. fixed number branches per case stochastic FALSE, mean Poisson distribution stochastic TRUE. stochastic Logical. TRUE, number branches per case sampled Poisson distribution mean R. Default FALSE. plot Logical. TRUE, function plot generated tree. Default FALSE.","code":""},{"path":"https://cygei.github.io/epitree/reference/make_tree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a Transmission Tree — make_tree","text":"igraph object representing transmission tree.","code":""},{"path":"https://cygei.github.io/epitree/reference/make_tree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a Transmission Tree — make_tree","text":"","code":"# Generate a deterministic transmission tree deterministic_tree <- make_tree(n_cases = 15, R = 2, stochastic = FALSE, plot = TRUE)   # Generate a stochastic transmission tree random_tree <- make_tree(n_cases = 15, R = 2, stochastic = TRUE, plot = TRUE)"},{"path":"https://cygei.github.io/epitree/reference/patristic.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the Patristic distance matrix — patristic","title":"Compute the Patristic distance matrix — patristic","text":"patristic distance number generations separating two nodes transmission tree.","code":""},{"path":"https://cygei.github.io/epitree/reference/patristic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the Patristic distance matrix — patristic","text":"","code":"patristic(tree)"},{"path":"https://cygei.github.io/epitree/reference/patristic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the Patristic distance matrix — patristic","text":"tree data frame representing transmission tree, first column containing infector IDs second infectee IDs.","code":""},{"path":"https://cygei.github.io/epitree/reference/patristic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the Patristic distance matrix — patristic","text":"square, symmetric matrix patristic distances nodes.","code":""},{"path":"https://cygei.github.io/epitree/reference/patristic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the Patristic distance matrix — patristic","text":"","code":"tree <- data.frame(from = c(1, 1, 2, 2, 3, 3), to = c(2, 3, 4, 5, 6, 7)) patristic(tree) #>   1 2 3 4 5 6 7 #> 1 0 1 1 2 2 2 2 #> 2 1 0 2 1 1 3 3 #> 3 1 2 0 3 3 1 1 #> 4 2 1 3 0 2 4 4 #> 5 2 1 3 2 0 4 4 #> 6 2 3 1 4 4 0 2 #> 7 2 3 1 4 4 2 0"},{"path":"https://cygei.github.io/epitree/reference/permanova_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform PERMANOVA on Sets of Transmission Trees — permanova_test","title":"Perform PERMANOVA on Sets of Transmission Trees — permanova_test","text":"Tests significant differences sets transmission trees using PERMANOVA (via vegan::adonis2).","code":""},{"path":"https://cygei.github.io/epitree/reference/permanova_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform PERMANOVA on Sets of Transmission Trees — permanova_test","text":"","code":"permanova_test(   ...,   within_dist = patristic,   between_dist = euclidean,   test_args = list() )"},{"path":"https://cygei.github.io/epitree/reference/permanova_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform PERMANOVA on Sets of Transmission Trees — permanova_test","text":"... Two sets transmission trees. set list dataframes columns (infector) (infectee). within_dist function compute pairwise distances within tree. Takes dataframe, returns square matrix. Default patristic. between_dist function compute distance two trees. Takes two matrices, returns numeric value. Default euclidean. test_args list additional arguments pass vegan::adonis2. Default empty list.","code":""},{"path":"https://cygei.github.io/epitree/reference/permanova_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform PERMANOVA on Sets of Transmission Trees — permanova_test","text":"vegan::adonis2 object containing test results.","code":""},{"path":"https://cygei.github.io/epitree/reference/permanova_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform PERMANOVA on Sets of Transmission Trees — permanova_test","text":"","code":"set.seed(1) # No difference in the sets setA <- replicate(10, igraph::as_long_data_frame(   make_tree(n_cases = 10, R = 2, stochastic = TRUE) ), simplify = FALSE ) setB <- replicate(10, igraph::as_long_data_frame(   make_tree(n_cases = 10, R = 2, stochastic = TRUE) ), simplify = FALSE ) mixtree:::permanova_test(setA, setB) #> Warning: number of items to replace is not a multiple of replacement length #> Permutation test for adonis under reduced model #> Permutation: free #> Number of permutations: 999 #>  #> (function (formula, data, permutations = 999, method = \"bray\", sqrt.dist = FALSE, add = FALSE, by = NULL, parallel = getOption(\"mc.cores\"), na.action = na.fail, strata = NULL, ...)  #>          Df SumOfSqs      R2      F Pr(>F) #> Model     1    31.05 0.04356 0.8199  0.592 #> Residual 18   681.70 0.95644               #> Total    19   712.75 1.00000                # Difference in the sets setC <- replicate(10, igraph::as_long_data_frame(   make_tree(n_cases = 10, R = 4, stochastic = TRUE) ), simplify = FALSE ) mixtree:::permanova_test(setA, setB, setC) #> Warning: number of items to replace is not a multiple of replacement length #> Permutation test for adonis under reduced model #> Permutation: free #> Number of permutations: 999 #>  #> (function (formula, data, permutations = 999, method = \"bray\", sqrt.dist = FALSE, add = FALSE, by = NULL, parallel = getOption(\"mc.cores\"), na.action = na.fail, strata = NULL, ...)  #>          Df SumOfSqs      R2      F Pr(>F)     #> Model     2   151.93 0.15283 2.4354  0.001 *** #> Residual 27   842.20 0.84717                   #> Total    29   994.13 1.00000                   #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1"},{"path":"https://cygei.github.io/epitree/reference/shuffle_graph_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Shuffle Node IDs in a Graph — shuffle_graph_ids","title":"Shuffle Node IDs in a Graph — shuffle_graph_ids","text":"Randomly shuffles IDs nodes given graph optionally plots shuffled graph.","code":""},{"path":"https://cygei.github.io/epitree/reference/shuffle_graph_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shuffle Node IDs in a Graph — shuffle_graph_ids","text":"","code":"shuffle_graph_ids(g, plot = FALSE)"},{"path":"https://cygei.github.io/epitree/reference/shuffle_graph_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shuffle Node IDs in a Graph — shuffle_graph_ids","text":"g igraph object representing graph. plot Logical. TRUE, function plot shuffled graph. Default FALSE.","code":""},{"path":"https://cygei.github.io/epitree/reference/shuffle_graph_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shuffle Node IDs in a Graph — shuffle_graph_ids","text":"igraph object shuffled node IDs.","code":""},{"path":"https://cygei.github.io/epitree/reference/shuffle_graph_ids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shuffle Node IDs in a Graph — shuffle_graph_ids","text":"","code":"# Create an example graph g <- make_tree(n_cases = 10, R = 2)  # Shuffle the node IDs shuffled_graph <- shuffle_graph_ids(g, plot = TRUE)"},{"path":"https://cygei.github.io/epitree/reference/tree_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Test Differences Between Sets of Transmission Trees — tree_test","title":"Test Differences Between Sets of Transmission Trees — tree_test","text":"Performs statistical test assess whether significant differences sets transmission trees. Supports PERMANOVA (via \"vegan::adonis2\"), Chi-Square, Fisher's Exact Test.","code":""},{"path":"https://cygei.github.io/epitree/reference/tree_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test Differences Between Sets of Transmission Trees — tree_test","text":"","code":"tree_test(   ...,   method = c(\"permanova\", \"chisq\", \"fisher\"),   within_dist = patristic,   between_dist = euclidean,   test_args = list() )"},{"path":"https://cygei.github.io/epitree/reference/tree_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test Differences Between Sets of Transmission Trees — tree_test","text":"... Two sets transmission trees. set must list data frames columns (infector) (infectee). method character string specifying test method. Options \"permanova\", #' \"chisq\", \"fisher\". Default \"permanova\". within_dist function compute pairwise distances within tree PERMANOVA. Takes data frame, returns square matrix. Default patristic. between_dist function compute distance two trees PERMANOVA. Takes two matrices, returns numeric value. Default euclidean. test_args list additional arguments pass underlying test function (vegan::adonis2, stats::chisq.test, stats::fisher.test). Default empty list.","code":""},{"path":"https://cygei.github.io/epitree/reference/tree_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test Differences Between Sets of Transmission Trees — tree_test","text":"\"permanova\": \"vegan::adonis2\" object containing test results. \"chisq\" \"fisher\": \"htest\" object test results.","code":""},{"path":"https://cygei.github.io/epitree/reference/tree_test.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test Differences Between Sets of Transmission Trees — tree_test","text":"function compares sets transmission trees using one three statistical tests. PERMANOVA: Evaluates whether topological distribution transmission trees differs sets. Null Hypothesis (H0): Transmission trees sets drawn distribution, implying similar topologies. Alternative Hypothesis (H1): least one set transmission trees comes different distribution. Chi-Square Fisher’s Exact Test: Evaluates whether distribution infector-infectee pairs differs sets. Null Hypothesis (H0): frequency infector-infectee pairs consistent across sets. Alternative Hypothesis (H1): frequency infector-infectee pairs differs least two sets.","code":""},{"path":"https://cygei.github.io/epitree/reference/tree_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test Differences Between Sets of Transmission Trees — tree_test","text":"","code":"set.seed(1) # Generate example sets setA <- replicate(10, igraph::as_long_data_frame(   make_tree(n_cases = 10, R = 2, stochastic = TRUE) ), simplify = FALSE) setB <- replicate(10, igraph::as_long_data_frame(   make_tree(n_cases = 10, R = 2, stochastic = TRUE) ), simplify = FALSE) setC <- replicate(10, igraph::as_long_data_frame(   make_tree(n_cases = 10, R = 4, stochastic = TRUE) ), simplify = FALSE)  # PERMANOVA test tree_test(setA, setB, setC,  method = \"permanova\") #> Warning: number of items to replace is not a multiple of replacement length #> Permutation test for adonis under reduced model #> Permutation: free #> Number of permutations: 999 #>  #> (function (formula, data, permutations = 999, method = \"bray\", sqrt.dist = FALSE, add = FALSE, by = NULL, parallel = getOption(\"mc.cores\"), na.action = na.fail, strata = NULL, ...)  #>          Df SumOfSqs      R2      F Pr(>F)   #> Model     2   103.13 0.10511 1.5856  0.053 . #> Residual 27   878.10 0.89489                 #> Total    29   981.23 1.00000                 #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1  # Chi-Square test tree_test(setA, setB, setC, method = \"chisq\") #> Warning: Chi-squared approximation may be incorrect #>  #> \tPearson's Chi-squared test #>  #> data:  count data #> X-squared = 72.91, df = 54, p-value = 0.04412 #>"},{"path":"https://cygei.github.io/epitree/reference/validate_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate a Set of Transmission Trees — validate_set","title":"Validate a Set of Transmission Trees — validate_set","text":"Ensures input list containing least one dataframe.","code":""},{"path":"https://cygei.github.io/epitree/reference/validate_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate a Set of Transmission Trees — validate_set","text":"","code":"validate_set(set)"},{"path":"https://cygei.github.io/epitree/reference/validate_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate a Set of Transmission Trees — validate_set","text":"set list containing least one dataframe.","code":""},{"path":"https://cygei.github.io/epitree/reference/validate_set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate a Set of Transmission Trees — validate_set","text":"Invisible TRUE set valid. Throws error invalid.","code":""},{"path":"https://cygei.github.io/epitree/reference/validate_sets.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate sets of transmission trees — validate_sets","title":"Validate sets of transmission trees — validate_sets","text":"Checks provided input list least two valid sets transmission trees. set expected list containing least one data frame, verified validate_set.","code":""},{"path":"https://cygei.github.io/epitree/reference/validate_sets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate sets of transmission trees — validate_sets","text":"","code":"validate_sets(sets)"},{"path":"https://cygei.github.io/epitree/reference/validate_sets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate sets of transmission trees — validate_sets","text":"sets list element represents set transmission trees. set must list containing one data frames.","code":""},{"path":"https://cygei.github.io/epitree/reference/validate_sets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate sets of transmission trees — validate_sets","text":"Invisible TRUE sets valid. Throws error invalid.","code":""},{"path":"https://cygei.github.io/epitree/reference/validate_sets.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validate sets of transmission trees — validate_sets","text":"least two sets provided. set list (data frame ). set contains least one element. Every element set data frame.","code":""},{"path":[]},{"path":"https://cygei.github.io/epitree/reference/validate_tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate a Transmission Tree — validate_tree","title":"Validate a Transmission Tree — validate_tree","text":"Checks transmission tree meets specific topology criteria test. tree must directed acyclic graph (DAG), weakly connected, one infector per node.","code":""},{"path":"https://cygei.github.io/epitree/reference/validate_tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate a Transmission Tree — validate_tree","text":"","code":"validate_tree(tree)"},{"path":"https://cygei.github.io/epitree/reference/validate_tree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate a Transmission Tree — validate_tree","text":"tree data frame columns representing transmission tree.","code":""},{"path":"https://cygei.github.io/epitree/reference/validate_tree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate a Transmission Tree — validate_tree","text":"Invisible TRUE tree valid. Throws error invalid.","code":""},{"path":"https://cygei.github.io/epitree/reference/validate_tree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate a Transmission Tree — validate_tree","text":"","code":"good_tree <- data.frame(from = c(1, 2, 3), to = c(2, 3, 4)) validate_tree(good_tree) bad_tree <- data.frame(from = c(1, 2, 3), to = c(2, 3, 2)) try(validate_tree(bad_tree)) #> Error in validate_tree(bad_tree) : must be a directed acyclic graph."}]
